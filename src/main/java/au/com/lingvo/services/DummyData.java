package au.com.lingvo.services;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpEntity;import org.springframework.http.HttpHeaders;import org.springframework.http.MediaType;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Service;import org.springframework.web.client.RestTemplate;import java.io.IOException;import java.net.URL;import java.nio.file.Files;import java.nio.file.Paths;import java.util.logging.Level;import java.util.logging.Logger;@Servicepublic class DummyData {    private Logger log = Logger.getLogger(DummyData.class.getName());    @Autowired    private RestTemplate restTemplate;    @Scheduled(initialDelay = 1000, fixedDelay = 991000)    public void addData() {        ObjectMapper mapper = new ObjectMapper();        try {            HttpHeaders headers = new HttpHeaders();            headers.setContentType(MediaType.APPLICATION_JSON);            restTemplate.postForLocation("http://localhost:8080/location", getStringHttpEntity(headers, "location1.json"));            restTemplate.postForLocation("http://localhost:8080/location", getStringHttpEntity(headers, "location2.json"));            restTemplate.postForLocation("http://localhost:8080/location", getStringHttpEntity(headers, "location3.json"));            restTemplate.postForLocation("http://localhost:8080/profile", getStringHttpEntity(headers, "profile1.json"));            restTemplate.postForLocation("http://localhost:8080/profile", getStringHttpEntity(headers, "profile2.json"));            restTemplate.postForLocation("http://localhost:8080/profile", getStringHttpEntity(headers, "profile3.json"));                    /*            profileRepository.save(profile);            resource = getClass().getClassLoader().getResource("profile2.json");            profile = mapper.readValue(resource, Profile.class);            profileRepository.save(profile);            resource = getClass().getClassLoader().getResource("profile3.json");            profile = mapper.readValue(resource, Profile.class);            profileRepository.save(profile);            resource = getClass().getClassLoader().getResource("message1.json");            Message message = mapper.readValue(resource, Message.class);            messageRepository.save(message);            resource = getClass().getClassLoader().getResource("message2.json");            message = mapper.readValue(resource, Message.class);            messageRepository.save(message);            resource = getClass().getClassLoader().getResource("message3.json");            message = mapper.readValue(resource, Message.class);            messageRepository.save(message);*/        } catch (Throwable e) {            log.log(Level.SEVERE, e.getMessage(), e);        }    }    private HttpEntity<String> getStringHttpEntity(HttpHeaders headers, String name) throws IOException {        URL resource = getClass().getClassLoader().getResource(name);        byte[] encoded = Files.readAllBytes(Paths.get(resource.getPath()));        String requestJson = new String(encoded);        return new HttpEntity<String>(requestJson, headers);    }}